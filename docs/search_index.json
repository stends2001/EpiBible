[["index.html", "Epibible Chapter 1 Preface", " Epibible Sten de Schrijver 2025-08-16 Chapter 1 Preface Hi, and welcome! This digital book is meant to serve as a big piece of reference material, covering everything someone with a basic understanding of epidemiology should know. We will be covering some fundamental epidemiology itself, and we will also integrate this fundamental knowledge into learning how to use R for collecting, processing, visualizing and analyzing the most important thing in epidemiology; data. The idea behind this material is not to make an R-wizard out of you. The goal is to get you familiar with R, and with other tools and sources, so that you can develop your own toolkit by yourself, after finishing this document! You will get familiar with some basic computations in R, with some actual mathematical modelling, and with Github and other programming - words that any epidemiologist should be familiar with. "],["overview.html", "Chapter 2 Overview", " Chapter 2 Overview "],["introduction-to-epidemiology.html", "Chapter 3 Introduction to Epidemiology", " Chapter 3 Introduction to Epidemiology "],["working-with-data.html", "Chapter 4 Working with data 4.1 Installing packages 4.2 Case study: Yellow Fever", " Chapter 4 Working with data Data is at the heart of epidemiology. We look at where and when diseases occur, to hopefully better understand their origin or their cause, how to prevent or cure the disease, or to make predictions about the future. That’s why epidemiologists need to be able to work with disease data, and know how and where to look for it! That’s why in this chapter we go over some data-extraction, processing, visualization and analysis. We start simple, with an example of Yellow Fever, and then get into more complex case in which we try to understand cholera outbreaks. 4.1 Installing packages library(scales) library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.3 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ readr::col_factor() masks scales::col_factor() ## ✖ purrr::discard() masks scales::discard() ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors library(gapminder) library(ggplot2) library(rnaturalearth) library(rnaturalearthdata) ## ## Attaching package: &#39;rnaturalearthdata&#39; ## ## The following object is masked from &#39;package:rnaturalearth&#39;: ## ## countries110 library(readr) library(sf) ## Linking to GEOS 3.11.2, GDAL 3.8.2, PROJ 9.3.1; sf_use_s2() is TRUE library(glue) 4.1.1 Installing world shapedata Eventually, I want to show you how to make some plots and some maps. For that, we need to load the shape of the world, so that we can fill in countries with certain colors and such. For that we’ll load the world shapefile from the package rnaturalearth. This dataset includes many different columns, but we only require some of them; name, geometry and continent. world_shapefile = ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) %&gt;% select(c(&quot;name&quot;,&quot;geometry&quot;, &quot;continent&quot;)) colnames(world_shapefile)[1] = c(&quot;country&quot;) continents_list = unique(world_shapefile$continent) countries_continents &lt;- world_shapefile %&gt;% st_set_geometry(NULL) %&gt;% select(country, continent) # World map ggplot(world_shapefile) + geom_sf(aes(fill = continent), color = &quot;black&quot;, linewidth = 0.01) + theme_minimal(base_size = 14) + labs( title = &#39;world shapefile&#39;, ) + theme( panel.background = element_rect(fill = &quot;#f7f9fc&quot;), legend.position = &quot;right&quot;, plot.title = element_text(face = &quot;bold&quot;, size = 16), plot.subtitle = element_text(size = 12) ) 4.2 Case study: Yellow Fever Context Yellow fever (YF) is a severe and sometimes fatal hemorrhagic fever caused by a flavivirus with a single-stranded, negatively oriented RNA genome. It primarily affects regions in Africa and Latin America, where the virus sustains itself through a sylvatic cycle involving wild mosquitoes and non-human primates. In Brazil, for instance, mosquito species like Haemagogus and Sabethes maintain this cycle in forested areas. While a highly effective vaccine exists, yellow fever outbreaks still occur, particularly when the virus spills over into urban settings. Historically, yellow fever was confined to Africa until the transatlantic slave trade introduced it to Latin America, where favorable climates and mosquito vectors allowed it to take root. Cities like New Orleans suffered repeated, devastating outbreaks in the past. Brazil saw a decline in cases mid-20th century, but a resurgence occurred between 2016 and 2018, with over 2,000 reported cases and a strikingly high death toll of 681. This resurgence was partly driven by the spread of the virus into urban areas, facilitated by Aedes aegypti and Aedes albopictus, mosquitoes that thrive in cities. Curiously, yellow fever has never established itself in Asia despite the presence of competent vectors and similar arboviruses, a mystery that may relate to immunological cross-reactivity with other flaviviruses like dengue. (Reference: Chippaux, 2018: https://doi.org/10.1186/s40409-018-0162-y) The WHO has data data available for download for many different things, including casenumbers for many infectious diseases, including that for YF. The raw data for YF you can find here. I have cleaned this data a little so that the dataframe is as concise as possible, and so that all the countrynames correctly map to the ones in the world_shapefile dataset. import data who_yellowfever = read_csv(&quot;data/cleaned_yellowfever.csv&quot;) ## Rows: 4029 Columns: 3 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): country ## dbl (2): year, cases ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(who_yellowfever) ## # A tibble: 6 × 3 ## country year cases ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Algeria 2024 0 ## 2 Andorra 2024 0 ## 3 Anguilla 2024 0 ## 4 Antigua and Barb. 2024 0 ## 5 Armenia 2024 0 ## 6 Aruba 2024 0 n_countries = length(unique(who_yellowfever$country)) first_year = min(who_yellowfever$year) last_year = max(who_yellowfever$year) glue(&quot;\\nThe dataframe contains yearly casedata for {n_countries} countries between {first_year} and {last_year}&quot;) ## The dataframe contains yearly casedata for 212 countries between 1974 and 2024 Global yearly cases Let’s first get a global overview of YF in the world the past 50 years. To start with, we will create a graph showing the number of cases in the world per year, and then we’ll show it per continent to see which are the ones most affected. # Global epicurve global_yearly_casenumbers &lt;- who_yellowfever %&gt;% group_by(year) %&gt;% summarise(cases = sum(cases)) ggplot(global_yearly_casenumbers) + geom_line(aes(x = year, y = cases), color = &#39;black&#39;, size = 1.5) + # black outline geom_line(aes(x = year, y = cases), color = &#39;#ffcc00&#39;, size = 1) + # yellow line scale_x_continuous(breaks = pretty_breaks(n = 20)) + # I don&#39;t want a break per year. I do a max of 20 year theme_classic(base_size = 14) + labs( x = &quot;&quot;, title = &quot;Yellow Fever Cases in the world 1974 - 2024&quot;, subtitle = &quot;number of cases reported to the WHO&quot; ) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. Yearly cases per continent yearly_casenumbers_continent = merge(who_yellowfever, countries_continents, by = &quot;country&quot;) %&gt;% group_by(year, continent) %&gt;% summarise(cases = sum(cases)) %&gt;% filter(continent %in% continents_list) ## `summarise()` has grouped output by &#39;year&#39;. You can override using the ## `.groups` argument. ggplot(yearly_casenumbers_continent) + geom_line(aes(x = year, y = cases, color = continent), size = 1.5) + scale_x_continuous(breaks = pretty_breaks(n = 20)) + theme_classic(base_size = 14) + scale_color_brewer(palette = &quot;Dark2&quot;) + # 7 distinct colors labs( x = &quot;&quot;, title = &quot;Yellow Fever Cases in the world 1973 - 2024 per continent&quot;, subtitle = &quot;number of cases reported to the WHO&quot; ) + theme(legend.position = &quot;bottom&quot;) We can clearly tell that since 1974, Africa has experienced the largest burden by YF, though South America suffered between 2016 and 2019 as well. Let’s have a look at the total sum of cases per country in the past, to see which countries and which areas are affected the most. cases_per_country = who_yellowfever%&gt;% group_by(country) %&gt;% summarise(cases = sum(cases)) mapdata = st_as_sf(merge(cases_per_country, world_shapefile, on = &#39;country&#39;, all.y = TRUE)) mapdata$cases_category &lt;- cut( mapdata$cases, breaks = c(0,100, 500, 1000, 2000, 5000, 10000, 20000, Inf), # 8 breaks → 7 intervals labels = c(&quot;0 - 100&quot;, &quot;101-500&quot;,&quot;501-1000&quot;, &quot;1001-2000&quot;, &quot;2001-5000&quot;, &quot;5001-10000&quot;, &quot;10001-20000&quot;, &quot;&gt;20000&quot;), include.lowest = TRUE ) pl &lt;- ggplot(mapdata) + geom_sf(aes(fill = cases_category), color = &quot;black&quot;, size = 0.1) + scale_fill_brewer(palette = &quot;YlOrRd&quot;, na.value = &quot;gray95&quot;, name = &quot;Cases&quot;) + theme_minimal(base_size = 14) + theme( panel.background = element_rect(fill = &quot;#E0FFFF&quot;), # clean light background legend.position = &quot;right&quot;, plot.title = element_text(face = &quot;bold&quot;, size = 16), plot.subtitle = element_text(size = 12) ) + labs(title = &#39;Cumulative cases 1974 - 2024&#39;) pl From this we can clearly see that the most affected regions are central and west Africa, as well as central(?) Latin America. This does not allow us to look into temporal dynamics though, so let’s look a bit further into that using a function. plot_country = function(country_filter){ filtered_df &lt;- who_yellowfever %&gt;% filter(country == country_filter) pl = ggplot(filtered_df) + geom_line(aes(x = year, y = cases), color = &#39;black&#39;, size = 1.5) + # black outline geom_line(aes(x = year, y = cases), color = &#39;#ffcc00&#39;, size = 1) + # yellow line geom_point(aes(x = year, y = cases), color = &#39;black&#39;, size = 1) + # black outline scale_x_continuous(breaks = pretty_breaks(n = 20)) + theme_classic(base_size = 14) + labs(x = &quot;&quot;, y=&#39;cases&#39;) + labs( title = paste0(&quot;Yellow Fever Cases in &quot;, country_filter, &quot; 1973 - 2024&quot;), subtitle = &quot;number of cases reported to the WHO&quot; ) return(pl) } plot_country(&quot;Dem. Rep. Congo&quot;) plot_country(&quot;Chad&quot;) plot_country(&quot;Nigeria&quot;) plot_country(&quot;Ghana&quot;) plot_country(&quot;Brazil&quot;) plot_country(&quot;Peru&quot;) This is actually already interesting! We can see that some many of these countries have very big outbreaks in a specific year, or over a couple of years, while a peak in one country doesn’t necessarily translate in one elsewhere. Peru, for example, had a big outbreak in 1995, and hasn’t had many cases since. Brazil, however, did not report manby cases until 2017 when it detected a huge outbreak that lasted until 2018. "],["modelling.html", "Chapter 5 Modelling 5.1 Compartmental models 5.2 Forecasting", " Chapter 5 Modelling 5.1 Compartmental models 5.2 Forecasting 5.3 The world of AI 5.1 Compartmental models 5.1.1 SIR model in theory Compartmental models divide a population into distinct groups, or compartments, each governed by specific rules that describe how individuals move between compartments over time. In epidemiology, one of the most common models is the SIR model, which divides the population into three compartments: Susceptible (S): individuals who can contract the disease Infectious (I): individuals who are currently infected and can transmit the disease Recovered (R): individuals who have recovered and are no longer infectious Individuals move from S to I (when infected), and from I to R (when they recover). This progression can be described using either discrete-time or continuous-time equations. 5.1.1.1 Discrete-Time Formulation The discrete-time version of the SIR model is expressed as: \\[ \\begin{aligned} S_{t+1} &amp;= S_t - \\beta S_t I_t \\\\ I_{t+1} &amp;= I_t + \\beta S_t I_t - \\gamma I_t \\\\ R_{t+1} &amp;= R_t + \\gamma I_t \\end{aligned} \\] Here, \\(S_{t+1}\\) is the number of susceptible individuals at the next time step, determined by subtracting those who become infected. \\(I_{t+1}\\) increases with new infections and decreases as people recover. \\(R_{t+1}\\) increases with recoveries. 5.1.1.2 Continuous-Time Formulation (ODEs) For more refined, continuous-time modeling, we use ordinary differential equations: \\[ \\begin{aligned} \\frac{dS}{dt} &amp;= -\\beta S I \\\\ \\frac{dI}{dt} &amp;= \\beta S I - \\gamma I \\\\ \\frac{dR}{dt} &amp;= \\gamma I \\end{aligned} \\] These represent the rate of change of each compartment over time. Where: - \\(\\beta\\) is the transmission rate - \\(\\gamma\\) is the recovery rate - \\(N = S + I + R\\) is the total population 5.1.2 SIR model in R Despite its simplicity, the SIR model can be surprisingly effective. During the COVID-19 pandemic, many government advisors based their projections on variations of this basic framework. As an example, consider an influenza outbreak that occurred in 1978 at a boarding school in England. The on-site physician documented how many students were sick (in bed) and how many were recovering (convalescent) each day. This dataset is included in the outbreaks R package, allowing us to study it directly. library(outbreaks) data(&quot;influenza_england_1978_school&quot;) outbreak_data &lt;- influenza_england_1978_school head(outbreak_data) ## date in_bed convalescent ## 1 1978-01-22 3 0 ## 2 1978-01-23 8 0 ## 3 1978-01-24 26 0 ## 4 1978-01-25 76 0 ## 5 1978-01-26 225 9 ## 6 1978-01-27 298 17 outbreak_data_long &lt;- pivot_longer(outbreak_data, cols = c(in_bed, convalescent), names_to = &quot;group&quot;, values_to = &quot;count&quot;) ggplot(outbreak_data_long, aes(x = date, y = count, color = group)) + geom_line(linewidth = 1.2) + geom_point(color = &quot;black&quot;, size = 2) + scale_x_date(breaks = outbreak_data_long$date, date_labels = &quot;%b %d&quot;) + labs(title = &quot;Influenza Outbreak (1978 Boarding School)&quot;, x = &quot;&quot;, y = &quot;Number of Students&quot;, color = &quot;Status&quot;) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) Now let’s implement the SIR model in R: sir_model &lt;- function(number_of_days, BETA, GAMMA, dt = 1) { N &lt;- 763 I0 &lt;- 1 S0 &lt;- N - I0 R0 &lt;- 0 times &lt;- seq(0, number_of_days, by = dt) n_steps &lt;- length(times) sirdata &lt;- data.frame( t = times, S = numeric(n_steps), I = numeric(n_steps), R = numeric(n_steps) ) sirdata[1, ] &lt;- c(0, S0, I0, R0) for (tt in 2:n_steps) { S_prev &lt;- sirdata$S[tt - 1] I_prev &lt;- sirdata$I[tt - 1] R_prev &lt;- sirdata$R[tt - 1] new_infections &lt;- BETA * S_prev * I_prev * dt new_recoveries &lt;- GAMMA * I_prev * dt new_infections &lt;- min(new_infections, S_prev) new_recoveries &lt;- min(new_recoveries, I_prev) S_new &lt;- S_prev - new_infections I_new &lt;- I_prev + new_infections - new_recoveries R_new &lt;- R_prev + new_recoveries sirdata[tt, ] &lt;- c(times[tt], S_new, I_new, R_new) } return(sirdata) } output = sir_model(14, 0.0026, 0.565, 0.1) sirdata_long = pivot_longer(output, cols = c(&quot;S&quot;, &quot;I&quot;, &quot;R&quot;), names_to = &quot;compartment&quot;, values_to = &quot;count&quot;) ggplot(sirdata_long, aes(x = t, y = count, color = compartment)) + geom_line(linewidth = 1.2) + labs(title = &quot;Influenza Outbreak (1978 Boarding School)&quot;, x = &quot;&quot;, y = &quot;Number of Students&quot;, color = &quot;Status&quot;) + theme_minimal() Let’s now compare the observed in_bed data with the simulated number of infectious individuals: sir_output &lt;- sir_model(14, 0.0026, 0.565, dt = 0.1) sir_daily &lt;- sir_output %&gt;% group_by(day = floor(t)) %&gt;% summarize(I_simulated = mean(I)) observed_data &lt;- outbreak_data %&gt;% mutate(day = as.numeric(date - min(date))) %&gt;% select(day, in_bed) plot_data &lt;- left_join(observed_data, sir_daily, by = &quot;day&quot;) %&gt;% pivot_longer(cols = c(in_bed, I_simulated), names_to = &quot;type&quot;, values_to = &quot;count&quot;) ggplot(plot_data, aes(x = day, y = count, color = type)) + geom_line(linewidth = 1.2) + geom_point(size = 2, alpha = 0.8) + scale_x_continuous(breaks = 0:max(plot_data$day)) + labs(title = &quot;Observed vs Simulated Infections&quot;, x = &quot;Days Since Outbreak Start&quot;, y = &quot;Number of Students&quot;, color = &quot;Data Type&quot;) + theme_minimal() + theme(axis.text.x = element_text(angle = 0)) 5.2 Forecasting Forecasting plays a crucial role in infectious disease epidemiology by enabling short-term projections of case counts. These projections help guide timely public health decisions, especially when diseases exhibit seasonal or trend-driven behavior. In this section, we compare two popular time series approaches: Holt-Winters exponential smoothing, which models level, trend, and seasonality using exponentially weighted averages. ARIMA (AutoRegressive Integrated Moving Average), a flexible class of models that can account for autoregressive lags, differencing (trends), and moving average components, including seasonal extensions (SARIMA). Unlike mechanistic models (e.g., SIR), these statistical methods do not rely on assumptions about transmission mechanisms. Instead, they learn from the patterns and structure of historical data to forecast future values. We apply both models to weekly national tick-borne encephalitis (TBE) cases and generate forecasts for the year following a specified historical cutoff. library(dplyr) library(ggplot2) library(forecast) ## Registered S3 method overwritten by &#39;quantmod&#39;: ## method from ## as.zoo.data.frame zoo library(lubridate) library(patchwork) # --- Load and preprocess data --- tbe_local &lt;- read.csv(&quot;C:/Users/stend/Documents/2. Extracurricular/EpiBible/tick_borne_encephalitis.csv&quot;) tbe_national &lt;- tbe_local %&gt;% mutate(timestamp = as.Date(timestamp)) %&gt;% group_by(timestamp) %&gt;% summarise(cases = sum(cases), .groups = &quot;drop&quot;) # --- Forecasting setup --- year &lt;- 2018 # Change to define cutoff year tbe_national_context &lt;- tbe_national %&gt;% filter(year(timestamp) &lt;= year) tbe_national_future &lt;- tbe_national %&gt;% filter(year(timestamp) == year + 1) %&gt;% arrange(timestamp) # ---- Create time series object ---- context_ts &lt;- ts(tbe_national_context$cases, frequency = 52) # ---- Holt-Winters model ---- hw_model &lt;- HoltWinters(context_ts) forecast_hw &lt;- forecast(hw_model, h = 52) predicted_df_hw &lt;- data.frame( timestamp = seq.Date(from = as.Date(paste0(year + 1, &quot;-01-01&quot;)), by = &quot;week&quot;, length.out = 52), cases = as.numeric(forecast_hw$mean), type = &quot;predicted_hw&quot; ) # ---- ARIMA model ---- arima_model &lt;- auto.arima(context_ts, seasonal = TRUE) forecast_arima &lt;- forecast(arima_model, h = 52) predicted_df_arima &lt;- data.frame( timestamp = seq.Date(from = as.Date(paste0(year + 1, &quot;-01-01&quot;)), by = &quot;week&quot;, length.out = 52), cases = as.numeric(forecast_arima$mean), type = &quot;predicted_arima&quot; ) # ---- Combine all data for plotting ---- context_labeled &lt;- tbe_national_context %&gt;% mutate(type = &quot;historical&quot;) future_labeled &lt;- tbe_national_future %&gt;% mutate(type = &quot;observed&quot;) combined_data &lt;- bind_rows(context_labeled, future_labeled, predicted_df_hw, predicted_df_arima) # ---- Plot full timeline ---- main_plot &lt;- ggplot(combined_data, aes(x = timestamp, y = cases, color = type)) + geom_line(linewidth = 1.2) + scale_color_manual(values = c( &quot;historical&quot; = &quot;#1f77b4&quot;, &quot;observed&quot; = &quot;#2ca02c&quot;, &quot;predicted_hw&quot; = &quot;#d62728&quot;, &quot;predicted_arima&quot; = &quot;#ff7f0e&quot; )) + theme_classic() + labs( title = paste(&quot;TBE Weekly Cases: Forecasting&quot;, year + 1), x = &quot;Time&quot;, y = &quot;Cases&quot;, color = &quot;Data Type&quot; ) + theme( legend.position = &quot;top&quot;, plot.title = element_text(face = &quot;bold&quot;, size = 16) ) # ---- Plot zoomed forecast year ---- zoom_plot &lt;- combined_data %&gt;% filter(year(timestamp) == year + 1) %&gt;% ggplot(aes(x = timestamp, y = cases, color = type)) + geom_line(linewidth = 1.2) + scale_color_manual(values = c( &quot;historical&quot; = &quot;#1f77b4&quot;, &quot;observed&quot; = &quot;#2ca02c&quot;, &quot;predicted_hw&quot; = &quot;#d62728&quot;, &quot;predicted_arima&quot; = &quot;#ff7f0e&quot; )) + theme_classic() + labs( title = paste(&quot;Zoom: Forecasts vs Observed in&quot;, year + 1), x = &quot;Week&quot;, y = &quot;Cases&quot; ) + theme( legend.position = &quot;none&quot;, plot.title = element_text(face = &quot;bold&quot;) ) # ---- Combine and show ---- main_plot / zoom_plot + plot_layout(heights = c(2, 1)) This analysis demonstrates how different statistical forecasting methods—Holt-Winters vs ARIMA—perform on the same epidemiological time series. While Holt-Winters is intuitive and captures seasonality well, ARIMA can offer greater flexibility in modeling autocorrelated structures. Comparing their predictions side-by-side allows us to evaluate model fit and choose an approach best suited for early warning or planning systems. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
